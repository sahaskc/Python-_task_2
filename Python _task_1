import pandas as pd

def generate_car_matrix(dataset_path):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(dataset_path)

    # Pivot the DataFrame to create the desired matrix
    result_matrix = df.pivot(index='id_1', columns='id_2', values='car')

    # Fill NaN values with 0 and set diagonal values to 0
    result_matrix = result_matrix.fillna(0).astype(int)
    result_matrix.values[[range(len(result_matrix))]*2] = 0

    return result_matrix



import pandas as pd

def get_type_count(dataset_path):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(dataset_path)

    # Define the conditions for car_type
    conditions = [
        (df['car'] <= 15),
        (df['car'] > 15) & (df['car'] <= 25),
        (df['car'] > 25)
    ]

    # Define the corresponding car_type values
    car_types = ['low', 'medium', 'high']

    # Create the car_type column based on conditions
    df['car_type'] = pd.cut(df['car'], bins=[-float('inf'), 15, 25, float('inf')], labels=car_types)

    # Count the occurrences of each car_type category
    type_counts = df['car_type'].value_counts().to_dict()

    # Sort the dictionary alphabetically based on keys
    sorted_type_counts = dict(sorted(type_counts.items()))

    return sorted_type_counts



import pandas as pd

def get_bus_indexes(dataset_path):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(dataset_path)

    # Calculate the mean value of the 'bus' column
    mean_bus = df['bus'].mean()

    # Identify indices where 'bus' values are greater than twice the mean
    bus_indexes = df[df['bus'] > 2 * mean_bus].index.tolist()

    # Sort the indices in ascending order
    bus_indexes.sort()

    return bus_indexes


import pandas as pd

def filter_routes(dataset_path):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(dataset_path)

    # Group by 'route' and calculate the average of 'truck' for each route
    route_avg_truck = df.groupby('route')['truck'].mean()

    # Filter routes where the average of 'truck' is greater than 7
    filtered_routes = route_avg_truck[route_avg_truck > 7].index.tolist()

    # Sort the list of routes in ascending order
    filtered_routes.sort()

    return filtered_routes



import pandas as pd

def multiply_matrix(result_matrix):
    # Apply the multiplication logic to the DataFrame
    modified_matrix = result_matrix.applymap(lambda x: x * 0.75 if x > 20 else x * 1.25)

    # Round values to 1 decimal place
    modified_matrix = modified_matrix.round(1)

    return modified_matrix


import pandas as pd

def verify_timestamps(df):
    # Convert timestamp columns to datetime format
    df['start_datetime'] = pd.to_datetime(df['startDay'] + ' ' + df['startTime'])
    df['end_datetime'] = pd.to_datetime(df['endDay'] + ' ' + df['endTime'])

    # Calculate the time duration for each row
    df['duration'] = df['end_datetime'] - df['start_datetime']

    # Group by (id, id_2) and check for incorrect timestamps
    incorrect_timestamps = df.groupby(['id', 'id_2'])['duration'].agg(
        lambda x: not all(day in x for day in pd.date_range(start='00:00:00', end='23:59:59', freq='D'))
    )

    return incorrect_timestamps
